# Maven package Java project Web App to Linux on Azure
# Build your Java project and deploy it to Azure as a Linux web app
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  branches:
    include:
      - refs/tags/*

pool: Default # Use my own runners

variables:

  # Figure out tag name
  tag: $[replace(variables['Build.SourceBranch'], 'refs/tags/', '')]

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildMavenPackage
#    pool: Default
    steps:
    - task: Maven@3
      displayName: 'Set Maven Version'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'versions:set'
        options: '-DnewVersion=$(tag)'

    - task: Maven@3
      displayName: 'Maven Package'
      inputs:
        mavenPomFile: 'pom.xml'
        options: '
           -Darg.release.version=$(tag)
           '

    - task: CopyFiles@2
      displayName: 'Copy Files to artifact staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/target/*.?(war|jar)'
        TargetFolder: $(Build.ArtifactStagingDirectory)
      
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: test-webapp2 github
        action: edit

    - upload: $(Build.ArtifactStagingDirectory)
      artifact: drop

- stage: Deploy_Staging
  displayName: Deploy Staging stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployStagingWebApp
    workspace:
      clean: all
    displayName: Deploy Staging Web App
    environment: web-staging
#    pool: Default
#    pool:
#      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - script: ls -la $(Pipeline.Workspace)/drop/target/
          
          - task: Maven@3
            displayName: 'Azure Deploy via pom.xml'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'azure-webapp:deploy'
              options: '
                -Dtestapp.azure.subscriptionId=$(TESTAPP_AZURE_SUBSCRIPTIONID) 
                -Dtestapp.azure.auth.client=$(TESTAPP_AZURE_AUTH_CLIENT) 
                -Dtestapp.azure.auth.tenant=$(TESTAPP_AZURE_AUTH_TENANT) 
                -Dtestapp.azure.auth.key=$(TESTAPP_AZURE_AUTH_KEY) 
                -Dtestapp.azure.appName=${STAGING_TESTAPP_NAME}
                -Dtestapp.azure.war.dir=$(Pipeline.Workspace)/drop/target/ 
                -Dtestapp.azure.war.filesPattern=*.war
                '

- stage: Deploy_PROD
  displayName: Deploy PROD stage
  dependsOn: Deploy_Staging
  condition: succeeded()
  jobs:
  - deployment: DeployPRODWebApp
    workspace:
      clean: all
    displayName: Deploy PROD Web App
    environment: web-prod
#    pool: Default
#    pool:
#      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - script: ls -la $(Pipeline.Workspace)/drop/target/
          
          - task: Maven@3
            displayName: 'Azure Deploy via pom.xml'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'azure-webapp:deploy'
              options: '
                -Dtestapp.azure.subscriptionId=$(TESTAPP_AZURE_SUBSCRIPTIONID) 
                -Dtestapp.azure.auth.client=$(TESTAPP_AZURE_AUTH_CLIENT) 
                -Dtestapp.azure.auth.tenant=$(TESTAPP_AZURE_AUTH_TENANT) 
                -Dtestapp.azure.auth.key=$(TESTAPP_AZURE_AUTH_KEY) 
                -Dtestapp.azure.appName=${PROD_TESTAPP_NAME}
                -Dtestapp.azure.war.dir=$(Pipeline.Workspace)/drop/target/ 
                -Dtestapp.azure.war.filesPattern=*.war
                '
                